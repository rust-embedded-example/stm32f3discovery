#![doc = "Peripheral access API for STM32F303 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn TAMP_STAMP();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2_TSC();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_CH1();
    fn DMA1_CH2();
    fn DMA1_CH3();
    fn DMA1_CH4();
    fn DMA1_CH5();
    fn DMA1_CH6();
    fn DMA1_CH7();
    fn ADC1_2();
    fn USB_HP_CAN_TX();
    fn USB_LP_CAN_RX0();
    fn CAN_RX1();
    fn CAN_SCE();
    fn EXTI9_5();
    fn TIM1_BRK_TIM15();
    fn TIM1_UP_TIM16();
    fn TIM1_TRG_COM_TIM17();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV_EXTI23();
    fn I2C1_ER();
    fn I2C2_EV_EXTI24();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1_EXTI25();
    fn USART2_EXTI26();
    fn USART3_EXTI28();
    fn EXTI15_10();
    fn RTCAlarm();
    fn USB_WKUP();
    fn TIM8_BRK();
    fn TIM8_UP();
    fn TIM8_TRG_COM();
    fn TIM8_CC();
    fn ADC3();
    fn FMC();
    fn SPI3();
    fn UART4_EXTI34();
    fn UART5_EXTI35();
    fn TIM6_DACUNDER();
    fn TIM7();
    fn DMA2_CH1();
    fn DMA2_CH2();
    fn DMA2_CH3();
    fn DMA2_CH4();
    fn DMA2_CH5();
    fn ADC4();
    fn COMP123();
    fn COMP456();
    fn COMP7();
    fn I2C3_EV();
    fn I2C3_ER();
    fn USB_HP();
    fn USB_LP();
    fn USB_WKUP_EXTI();
    fn TIM20_BRK();
    fn TIM20_UP();
    fn TIM20_TRG_COM();
    fn TIM20_CC();
    fn SPI4();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 85] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector {
        _handler: TAMP_STAMP,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector {
        _handler: EXTI2_TSC,
    },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: DMA1_CH1 },
    Vector { _handler: DMA1_CH2 },
    Vector { _handler: DMA1_CH3 },
    Vector { _handler: DMA1_CH4 },
    Vector { _handler: DMA1_CH5 },
    Vector { _handler: DMA1_CH6 },
    Vector { _handler: DMA1_CH7 },
    Vector { _handler: ADC1_2 },
    Vector {
        _handler: USB_HP_CAN_TX,
    },
    Vector {
        _handler: USB_LP_CAN_RX0,
    },
    Vector { _handler: CAN_RX1 },
    Vector { _handler: CAN_SCE },
    Vector { _handler: EXTI9_5 },
    Vector {
        _handler: TIM1_BRK_TIM15,
    },
    Vector {
        _handler: TIM1_UP_TIM16,
    },
    Vector {
        _handler: TIM1_TRG_COM_TIM17,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector {
        _handler: I2C1_EV_EXTI23,
    },
    Vector { _handler: I2C1_ER },
    Vector {
        _handler: I2C2_EV_EXTI24,
    },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector {
        _handler: USART1_EXTI25,
    },
    Vector {
        _handler: USART2_EXTI26,
    },
    Vector {
        _handler: USART3_EXTI28,
    },
    Vector {
        _handler: EXTI15_10,
    },
    Vector { _handler: RTCAlarm },
    Vector { _handler: USB_WKUP },
    Vector { _handler: TIM8_BRK },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_COM,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: ADC3 },
    Vector { _handler: FMC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI3 },
    Vector {
        _handler: UART4_EXTI34,
    },
    Vector {
        _handler: UART5_EXTI35,
    },
    Vector {
        _handler: TIM6_DACUNDER,
    },
    Vector { _handler: TIM7 },
    Vector { _handler: DMA2_CH1 },
    Vector { _handler: DMA2_CH2 },
    Vector { _handler: DMA2_CH3 },
    Vector { _handler: DMA2_CH4 },
    Vector { _handler: DMA2_CH5 },
    Vector { _handler: ADC4 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: COMP123 },
    Vector { _handler: COMP456 },
    Vector { _handler: COMP7 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _handler: USB_HP },
    Vector { _handler: USB_LP },
    Vector {
        _handler: USB_WKUP_EXTI,
    },
    Vector {
        _handler: TIM20_BRK,
    },
    Vector { _handler: TIM20_UP },
    Vector {
        _handler: TIM20_TRG_COM,
    },
    Vector { _handler: TIM20_CC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI4 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - PVD through EXTI line detection interrupt"]
    PVD = 1,
    #[doc = "2 - Tamper and TimeStamp interrupts"]
    TAMP_STAMP = 2,
    #[doc = "3 - RTC Wakeup interrupt through the EXTI line"]
    RTC_WKUP = 3,
    #[doc = "4 - Flash global interrupt"]
    FLASH = 4,
    #[doc = "5 - RCC global interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI Line0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI Line3 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI Line2 and Touch sensing interrupts"]
    EXTI2_TSC = 8,
    #[doc = "9 - EXTI Line3 interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI Line4 interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 channel 1 interrupt"]
    DMA1_CH1 = 11,
    #[doc = "12 - DMA1 channel 2 interrupt"]
    DMA1_CH2 = 12,
    #[doc = "13 - DMA1 channel 3 interrupt"]
    DMA1_CH3 = 13,
    #[doc = "14 - DMA1 channel 4 interrupt"]
    DMA1_CH4 = 14,
    #[doc = "15 - DMA1 channel 5 interrupt"]
    DMA1_CH5 = 15,
    #[doc = "16 - DMA1 channel 6 interrupt"]
    DMA1_CH6 = 16,
    #[doc = "17 - DMA1 channel 7interrupt"]
    DMA1_CH7 = 17,
    #[doc = "18 - ADC1 and ADC2 global interrupt"]
    ADC1_2 = 18,
    #[doc = "19 - USB High Priority/CAN_TX interrupts"]
    USB_HP_CAN_TX = 19,
    #[doc = "20 - USB Low Priority/CAN_RX0 interrupts"]
    USB_LP_CAN_RX0 = 20,
    #[doc = "21 - CAN_RX1 interrupt"]
    CAN_RX1 = 21,
    #[doc = "22 - CAN_SCE interrupt"]
    CAN_SCE = 22,
    #[doc = "23 - EXTI Line5 to Line9 interrupts"]
    EXTI9_5 = 23,
    #[doc = "24 - TIM1 Break/TIM15 global interruts"]
    TIM1_BRK_TIM15 = 24,
    #[doc = "25 - TIM1 Update/TIM16 global interrupts"]
    TIM1_UP_TIM16 = 25,
    #[doc = "26 - TIM1 trigger and commutation/TIM17 interrupts"]
    TIM1_TRG_COM_TIM17 = 26,
    #[doc = "27 - TIM1 capture compare interrupt"]
    TIM1_CC = 27,
    #[doc = "28 - TIM2 global interrupt"]
    TIM2 = 28,
    #[doc = "29 - TIM3 global interrupt"]
    TIM3 = 29,
    #[doc = "30 - TIM4 global interrupt"]
    TIM4 = 30,
    #[doc = "31 - I2C1 event interrupt and EXTI Line23 interrupt"]
    I2C1_EV_EXTI23 = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2 event interrupt & EXTI Line24 interrupt"]
    I2C2_EV_EXTI24 = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt and EXTI Line 25 interrupt"]
    USART1_EXTI25 = 37,
    #[doc = "38 - USART2 global interrupt and EXTI Line 26 interrupt"]
    USART2_EXTI26 = 38,
    #[doc = "39 - USART3 global interrupt and EXTI Line 28 interrupt"]
    USART3_EXTI28 = 39,
    #[doc = "40 - EXTI Line15 to Line10 interrupts"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC alarm interrupt"]
    RTCAlarm = 41,
    #[doc = "42 - USB wakeup from Suspend"]
    USB_WKUP = 42,
    #[doc = "43 - TIM8 break interrupt"]
    TIM8_BRK = 43,
    #[doc = "44 - TIM8 update interrupt"]
    TIM8_UP = 44,
    #[doc = "45 - TIM8 Trigger and commutation interrupts"]
    TIM8_TRG_COM = 45,
    #[doc = "46 - TIM8 capture compare interrupt"]
    TIM8_CC = 46,
    #[doc = "47 - ADC3 global interrupt"]
    ADC3 = 47,
    #[doc = "48 - FSMC global interrupt"]
    FMC = 48,
    #[doc = "51 - SPI3 global interrupt"]
    SPI3 = 51,
    #[doc = "52 - UART4 global and EXTI Line 34 interrupts"]
    UART4_EXTI34 = 52,
    #[doc = "53 - UART5 global and EXTI Line 35 interrupts"]
    UART5_EXTI35 = 53,
    #[doc = "54 - TIM6 global and DAC12 underrun interrupts"]
    TIM6_DACUNDER = 54,
    #[doc = "55 - TIM7 global interrupt"]
    TIM7 = 55,
    #[doc = "56 - DMA2 channel1 global interrupt"]
    DMA2_CH1 = 56,
    #[doc = "57 - DMA2 channel2 global interrupt"]
    DMA2_CH2 = 57,
    #[doc = "58 - DMA2 channel3 global interrupt"]
    DMA2_CH3 = 58,
    #[doc = "59 - DMA2 channel4 global interrupt"]
    DMA2_CH4 = 59,
    #[doc = "60 - DMA2 channel5 global interrupt"]
    DMA2_CH5 = 60,
    #[doc = "61 - ADC4 global interrupt"]
    ADC4 = 61,
    #[doc = "64 - COMP1 & COMP2 & COMP3 interrupts combined with EXTI Lines 21, 22 and 29 interrupts"]
    COMP123 = 64,
    #[doc = "65 - COMP4 & COMP5 & COMP6 interrupts combined with EXTI Lines 30, 31 and 32 interrupts"]
    COMP456 = 65,
    #[doc = "66 - COMP7 interrupt combined with EXTI Line 33 interrupt"]
    COMP7 = 66,
    #[doc = "72 - I2C3 Event interrupt"]
    I2C3_EV = 72,
    #[doc = "73 - I2C3 Error interrupt"]
    I2C3_ER = 73,
    #[doc = "74 - USB High priority interrupt"]
    USB_HP = 74,
    #[doc = "75 - USB Low priority interrupt"]
    USB_LP = 75,
    #[doc = "76 - USB wakeup from Suspend and EXTI Line 18"]
    USB_WKUP_EXTI = 76,
    #[doc = "77 - TIM20 Break interrupt"]
    TIM20_BRK = 77,
    #[doc = "78 - TIM20 Upgrade interrupt"]
    TIM20_UP = 78,
    #[doc = "79 - TIM20 Trigger and Commutation interrupt"]
    TIM20_TRG_COM = 79,
    #[doc = "80 - TIM20 Capture Compare interrupt"]
    TIM20_CC = 80,
    #[doc = "84 - SPI4 Global interrupt"]
    SPI4 = 84,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "General-purpose I/Os"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa;
#[doc = "General-purpose I/Os"]
pub type Gpiob = crate::Periph<gpiob::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob;
#[doc = "General-purpose I/Os"]
pub type Gpioc = crate::Periph<gpiob::RegisterBlock, 0x4800_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpioc;
#[doc = "General-purpose I/Os"]
pub type Gpiod = crate::Periph<gpiob::RegisterBlock, 0x4800_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpiod;
#[doc = "General-purpose I/Os"]
pub type Gpioe = crate::Periph<gpiob::RegisterBlock, 0x4800_1000>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpioe;
#[doc = "General-purpose I/Os"]
pub type Gpiof = crate::Periph<gpiob::RegisterBlock, 0x4800_1400>;
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpiof;
#[doc = "General-purpose I/Os"]
pub type Gpiog = crate::Periph<gpiob::RegisterBlock, 0x4800_1800>;
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpiog;
#[doc = "General-purpose I/Os"]
pub type Gpioh = crate::Periph<gpiob::RegisterBlock, 0x4800_1c00>;
impl core::fmt::Debug for Gpioh {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioh").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpiob as gpioh;
#[doc = "Touch sensing controller"]
pub type Tsc = crate::Periph<tsc::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for Tsc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tsc").finish()
    }
}
#[doc = "Touch sensing controller"]
pub mod tsc;
#[doc = "cyclic redundancy check calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "cyclic redundancy check calculation unit"]
pub mod crc;
#[doc = "Flash"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "Flash"]
pub mod flash;
#[doc = "Reset and clock control"]
pub type Rcc = crate::Periph<rcc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Rcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcc").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc;
#[doc = "DMA controller 1"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "DMA controller 1"]
pub mod dma1;
#[doc = "DMA controller 1"]
pub type Dma2 = crate::Periph<dma1::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for Dma2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2").finish()
    }
}
#[doc = "DMA controller 1"]
pub use self::dma1 as dma2;
#[doc = "General purpose timer"]
pub type Tim2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim2").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tim2;
#[doc = "General purpose timer"]
pub type Tim3 = crate::Periph<tim2::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim3").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tim2 as tim3;
#[doc = "General purpose timer"]
pub type Tim4 = crate::Periph<tim2::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Tim4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim4").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tim2 as tim4;
#[doc = "General purpose timers"]
pub type Tim15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tim15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim15").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim15;
#[doc = "General-purpose-timers"]
pub type Tim16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Tim16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim16").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tim16;
#[doc = "General purpose timer"]
pub type Tim17 = crate::Periph<tim17::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Tim17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim17").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tim17;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart4;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Uart5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart5").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart5;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub mod spi1;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi3;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi4 = crate::Periph<spi1::RegisterBlock, 0x4001_3c00>;
impl core::fmt::Debug for Spi4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi4").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi4;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type I2s2ext = crate::Periph<i2s2ext::RegisterBlock, 0x4000_3400>;
impl core::fmt::Debug for I2s2ext {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s2ext").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub mod i2s2ext;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type I2s3ext = crate::Periph<i2s2ext::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for I2s3ext {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s3ext").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::i2s2ext as i2s3ext;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "Power control"]
pub type Pwr = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pwr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwr").finish()
    }
}
#[doc = "Power control"]
pub mod pwr;
#[doc = "Controller area network"]
pub type Can = crate::Periph<can::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for Can {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can").finish()
    }
}
#[doc = "Controller area network"]
pub mod can;
#[doc = "Universal serial bus full-speed device interface"]
pub type UsbFs = crate::Periph<usb_fs::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for UsbFs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UsbFs").finish()
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usb_fs;
#[doc = "Inter-integrated circuit"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1;
#[doc = "Inter-integrated circuit"]
pub type I2c2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c2;
#[doc = "Inter-integrated circuit"]
pub type I2c3 = crate::Periph<i2c1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c3;
#[doc = "Independent watchdog"]
pub type Iwdg = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Iwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg").finish()
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg;
#[doc = "Window watchdog"]
pub type Wwdg = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg").finish()
    }
}
#[doc = "Window watchdog"]
pub mod wwdg;
#[doc = "Real-time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time clock"]
pub mod rtc;
#[doc = "Basic timers"]
pub type Tim6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Tim6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim6").finish()
    }
}
#[doc = "Basic timers"]
pub mod tim6;
#[doc = "Basic timers"]
pub type Tim7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Tim7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim7").finish()
    }
}
#[doc = "Basic timers"]
pub use self::tim6 as tim7;
#[doc = "Digital-to-analog converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac;
#[doc = "Debug support"]
pub type Dbgmcu = crate::Periph<dbgmcu::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for Dbgmcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbgmcu").finish()
    }
}
#[doc = "Debug support"]
pub mod dbgmcu;
#[doc = "Advanced timer"]
pub type Tim1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Tim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tim1;
#[doc = "Advanced timer"]
pub type Tim20 = crate::Periph<tim1::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for Tim20 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim20").finish()
    }
}
#[doc = "Advanced timer"]
pub use self::tim1 as tim20;
#[doc = "Advanced-timers"]
pub type Tim8 = crate::Periph<tim8::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Tim8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim8").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim8;
#[doc = "Analog-to-Digital Converter"]
pub type Adc1 = crate::Periph<adc1::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc1;
#[doc = "Analog-to-Digital Converter"]
pub type Adc2 = crate::Periph<adc1::RegisterBlock, 0x5000_0100>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc2;
#[doc = "Analog-to-Digital Converter"]
pub type Adc3 = crate::Periph<adc1::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for Adc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc3;
#[doc = "Analog-to-Digital Converter"]
pub type Adc4 = crate::Periph<adc1::RegisterBlock, 0x5000_0500>;
impl core::fmt::Debug for Adc4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc4").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc4;
#[doc = "Analog-to-Digital Converter"]
pub type Adc1_2 = crate::Periph<adc1_2::RegisterBlock, 0x5000_0300>;
impl core::fmt::Debug for Adc1_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1_2").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc1_2;
#[doc = "Analog-to-Digital Converter"]
pub type Adc3_4 = crate::Periph<adc1_2::RegisterBlock, 0x5000_0700>;
impl core::fmt::Debug for Adc3_4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3_4").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1_2 as adc3_4;
#[doc = "System configuration controller _Comparator and Operational amplifier"]
pub type SyscfgCompOpamp = crate::Periph<syscfg_comp_opamp::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for SyscfgCompOpamp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SyscfgCompOpamp").finish()
    }
}
#[doc = "System configuration controller _Comparator and Operational amplifier"]
pub mod syscfg_comp_opamp;
#[doc = "Flexible memory controller"]
pub type Fmc = crate::Periph<fmc::RegisterBlock, 0xa000_0400>;
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "Flexible memory controller"]
pub mod fmc;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "GPIOH"]
    pub gpioh: Gpioh,
    #[doc = "TSC"]
    pub tsc: Tsc,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "Flash"]
    pub flash: Flash,
    #[doc = "RCC"]
    pub rcc: Rcc,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "DMA2"]
    pub dma2: Dma2,
    #[doc = "TIM2"]
    pub tim2: Tim2,
    #[doc = "TIM3"]
    pub tim3: Tim3,
    #[doc = "TIM4"]
    pub tim4: Tim4,
    #[doc = "TIM15"]
    pub tim15: Tim15,
    #[doc = "TIM16"]
    pub tim16: Tim16,
    #[doc = "TIM17"]
    pub tim17: Tim17,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART3"]
    pub usart3: Usart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "UART5"]
    pub uart5: Uart5,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "SPI4"]
    pub spi4: Spi4,
    #[doc = "I2S2ext"]
    pub i2s2ext: I2s2ext,
    #[doc = "I2S3ext"]
    pub i2s3ext: I2s3ext,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "PWR"]
    pub pwr: Pwr,
    #[doc = "CAN"]
    pub can: Can,
    #[doc = "USB_FS"]
    pub usb_fs: UsbFs,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "I2C3"]
    pub i2c3: I2c3,
    #[doc = "IWDG"]
    pub iwdg: Iwdg,
    #[doc = "WWDG"]
    pub wwdg: Wwdg,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "TIM6"]
    pub tim6: Tim6,
    #[doc = "TIM7"]
    pub tim7: Tim7,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DBGMCU"]
    pub dbgmcu: Dbgmcu,
    #[doc = "TIM1"]
    pub tim1: Tim1,
    #[doc = "TIM20"]
    pub tim20: Tim20,
    #[doc = "TIM8"]
    pub tim8: Tim8,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC3"]
    pub adc3: Adc3,
    #[doc = "ADC4"]
    pub adc4: Adc4,
    #[doc = "ADC1_2"]
    pub adc1_2: Adc1_2,
    #[doc = "ADC3_4"]
    pub adc3_4: Adc3_4,
    #[doc = "SYSCFG_COMP_OPAMP"]
    pub syscfg_comp_opamp: SyscfgCompOpamp,
    #[doc = "FMC"]
    pub fmc: Fmc,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe {
            DEVICE_PERIPHERALS = true;
            Peripherals {
                gpioa: Gpioa::steal(),
                gpiob: Gpiob::steal(),
                gpioc: Gpioc::steal(),
                gpiod: Gpiod::steal(),
                gpioe: Gpioe::steal(),
                gpiof: Gpiof::steal(),
                gpiog: Gpiog::steal(),
                gpioh: Gpioh::steal(),
                tsc: Tsc::steal(),
                crc: Crc::steal(),
                flash: Flash::steal(),
                rcc: Rcc::steal(),
                dma1: Dma1::steal(),
                dma2: Dma2::steal(),
                tim2: Tim2::steal(),
                tim3: Tim3::steal(),
                tim4: Tim4::steal(),
                tim15: Tim15::steal(),
                tim16: Tim16::steal(),
                tim17: Tim17::steal(),
                usart1: Usart1::steal(),
                usart2: Usart2::steal(),
                usart3: Usart3::steal(),
                uart4: Uart4::steal(),
                uart5: Uart5::steal(),
                spi1: Spi1::steal(),
                spi2: Spi2::steal(),
                spi3: Spi3::steal(),
                spi4: Spi4::steal(),
                i2s2ext: I2s2ext::steal(),
                i2s3ext: I2s3ext::steal(),
                exti: Exti::steal(),
                pwr: Pwr::steal(),
                can: Can::steal(),
                usb_fs: UsbFs::steal(),
                i2c1: I2c1::steal(),
                i2c2: I2c2::steal(),
                i2c3: I2c3::steal(),
                iwdg: Iwdg::steal(),
                wwdg: Wwdg::steal(),
                rtc: Rtc::steal(),
                tim6: Tim6::steal(),
                tim7: Tim7::steal(),
                dac: Dac::steal(),
                dbgmcu: Dbgmcu::steal(),
                tim1: Tim1::steal(),
                tim20: Tim20::steal(),
                tim8: Tim8::steal(),
                adc1: Adc1::steal(),
                adc2: Adc2::steal(),
                adc3: Adc3::steal(),
                adc4: Adc4::steal(),
                adc1_2: Adc1_2::steal(),
                adc3_4: Adc3_4::steal(),
                syscfg_comp_opamp: SyscfgCompOpamp::steal(),
                fmc: Fmc::steal(),
            }
        }
    }
}
